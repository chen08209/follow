@use 'sass:map';
@use 'mixins/mixins' as *;
@use 'mixins/function' as *;
@use 'mixins/config' as *;
@use 'mixins/setVar' as *;
@use 'button' as *;
@use 'map' as *;

@include b(checkbox-button) {
  @include set-component-css-var('checkbox', $checkbox-button);
  @include set-component-css-var('checkbox-disabled', $checkbox-disabled);
  @include set-component-css-var('checkbox-ripple', $ripple);
}

@include b(checkbox-button) {
  position: relative;
  display: inline-block;

  @include e(inner) {
    display: inline-block;
    line-height: 1;
    font-weight: getCssVar('checkbox-font-weight');
    white-space: nowrap;
    vertical-align: middle;
    cursor: pointer;
    border: getCssVar('border');
    border-left: 0;
    -webkit-appearance: none;
    text-align: center;
    box-sizing: border-box;
    outline: none;
    margin: 0;
    position: relative;
    transition: getCssVar('transition-all');
    user-select: none;
    z-index: 0;

    @include button-size(
      map.get($button-padding-vertical, 'default') - $button-border-width,
      map.get($button-padding-horizontal, 'default') - $button-border-width,
      map.get($button-font-size, 'default'),
      0
    );

    &:hover {
      color: getCssVar('checkbox-active-text-color');
      border-color: getCssVar('checkbox-hover-border-color') !important;
      box-shadow: -1px 0 0 0 getCssVar('checkbox-hover-border-color');
    }

    & [class*='#{$namespace}-icon-'] {
      line-height: 0.9;

      & + span {
        margin-left: 5px;
      }
    }
  }

  @include when(checked) {
    &:first-child .#{$namespace}-checkbox-button__inner {
      border-left-color: getCssVar('checkbox-checked-border-color');
    }
    .#{$namespace}-ripple-wrapper {
      .#{$namespace}-ripple {
        background-color: getCssVar('checkbox-ripple-bg-color-5');
      }
    }
  }

  @include e(original) {
    opacity: 0;
    outline: none;
    position: absolute;
    margin: 0;
    z-index: -1;
    &:checked {
      & + .#{$namespace}-checkbox-button__inner {
        color: getCssVar('checkbox-active-text-color');
        background-color: getCssVar('checkbox-checked-bg-color');
        border-color: getCssVar('checkbox-checked-border-color');
        box-shadow: -1px 0 0 0 getCssVar('checkbox-checked-border-color');
      }
    }
    &:disabled {
      & + .#{$namespace}-checkbox-button__inner {
        color: getCssVar('checkbox-disabled-text-color');
        cursor: not-allowed;
        background-image: none;
        color: getCssVar('checkbox-disabled-text-color');
        border-color: getCssVar('checkbox-disabled-border-color') !important;
        box-shadow: none !important;
      }
      &:checked + .#{$namespace}-checkbox-button__inner {
        background-color: getCssVar('checkbox-disabled-bg-color');
      }
    }
  }

  &:first-child {
    .#{$namespace}-checkbox-button__inner {
      border-left: getCssVar('border');
      border-top-left-radius: getCssVar('border-radius-base');
      border-bottom-left-radius: getCssVar('border-radius-base');
      box-shadow: none !important;
    }
  }

  &.is-focus {
    & .#{$namespace}-checkbox-button__inner {
      border-color: getCssVar('checkbox-checked-border-color');
      box-shadow: -1px 0 0 0 getCssVar('checkbox-checked-border-color');
    }
  }

  &:last-child {
    .#{$namespace}-checkbox-button__inner {
      border-top-right-radius: getCssVar('border-radius-base');
      border-bottom-right-radius: getCssVar('border-radius-base');
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      .#{$namespace}-checkbox-button__inner {
        @include button-size(
          map.get($button-padding-vertical, $size) - $button-border-width,
          map.get($button-padding-horizontal, $size) - $button-border-width,
          map.get($button-font-size, $size),
          0
        );
      }
    }
  }
}
